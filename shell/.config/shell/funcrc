#!/usr/bin/env bash

# functions
venv(){
    if [[ "$(uname -m)" == "arm64" ]]; then
        pyenv shell 3.10 && python -m venv venv && pyenv shell --unset && source ./venv/bin/activate && ./venv/bin/python -m pip install -U pip
    else
        conda activate 3.9 && python -m venv venv && conda deactivate && source ./venv/bin/activate && ./venv/bin/python -m pip install -U pip
    fi
}

ace(){
    ace=$(/Users/austinraney/github/personal/activate/activate) && source "${ace}"
    unset ace
}

_git_rebase_origin(){
    git rebase origin/${1}
}

_git_rebase_upstream(){
    git rebase upstream/${1}
}

_git_fetch_origin(){
    git fetch origin "${@}" 
}

_git_fetch_upstream(){
    git fetch upstream "${@}" 
}

alias gro="_git_rebase_origin"
alias gru="_git_rebase_upstream"
alias gfo="_git_fetch_origin"
alias gfu="_git_fetch_upstream"

nproc(){
    sysctl -n hw.logicalcpu
}

ghi(){

	issue=$(gh issue list "${@}" --json number,title,state,author --template \
		'{{range .}}{{tablerow (printf "#%v" .number | autocolor "green") .title .state
			.author.login}}{{end}}' | \
		fzf)
	issue_number=$(echo ${issue} | awk '{gsub("#", ""); print $1}')
	gh issue view ${issue_number} --comments
}

n(){
# Resolves issue with nnn not being able to
# quit and cd to a directory. GitHub issues seems
# to show that this is just a Mac problem
    nnn "$@"

    if [ -f $NNN_TMPFILE ]; then
        . $NNN_TMPFILE
        rm $NNN_TMPFILE
    fi
}

fo(){

	f=$(fzf)

	if [ -f "$f" ];
	then
		case "${f##*.}" in
			"pdf" ) open -a /Applications/Skim.app "$f" ;;
			"doc" | "docx" ) open "$f" ;;
			*) vim "$f" ;;
		esac
	else
		:
	fi
}

ff(){
	f=$(fzf)
	if [ $? -eq 0 ]; then
		cd $(dirname "$f")
	else
		:
	fi
}

v(){
	vim "$1"
}

youtube_gif(){
	# Takes in youtube url and a file fame and outputs a gif
	[[ "$#" -lt 2 ]] && \
	printf "Not enough arguments requires url and output filename\n" \
	&& return;

	# Time helper functions
	parse_time_to_seconds(){
		read h m s <<< $(echo "$1" | tr ':' ' ');
		echo "($h * 3600) + ($m * 60) + $s" | bc
	}

	while [[ $# -gt 0 ]]; do
		case $1 in
			"-i" | "-I" )
				shift
				URL="$1"
				;;
			"-o" | "-O" )
				shift
				OUTPUT_FN="$1"
				;;
			"-s" | "-S" )
				shift
				START_TIME="$1"
				START_TIME_SEC=$(parse_time_to_seconds "$1")
				;;
			"-e" | "-E" )
				shift
				END_TIME=$(parse_time_to_seconds "$1")
				;;
			* )
				URL="$1"
				shift
				OUTPUT_FN="$1"
				break
				;;
		esac
		shift
	done

	# Check if mandatory variables are set
	[[ -z "$URL" ]] && [[ -z "$OUTPUT_FN" ]] && return;

	# Check if start and end time supplied
	if [[ -n "$START_TIME" && -n "$END_TIME" ]]; then
		TIME_DIFF=$(expr $END_TIME - $START_TIME_SEC)
		TIME_ARG="-ss $START_TIME -t $TIME_DIFF"

	elif [[ -n "$START_TIME" ]]; then
		END_TIME=$(youtube-dl --get-duration "$URL")
		TIME_ARG="-ss $START_TIME -t $END_TIME"
	fi

	# Youtube video stream url
	ffmpeg_url=$(youtube-dl -g "$URL" | sed '1q')

	ffmpeg	\
	${TIME_ARG} \
	-i "${ffmpeg_url}" -c copy "${OUTPUT_FN%%.gif}".mp4

	ffmpeg	\
	-i "${OUTPUT_FN%%.gif}".mp4 \
	-r 10 -vf scale=512:-1 \
	"${OUTPUT_FN}"

	rm -i "${OUTPUT_FN%%.gif}".mp4

}

